### Starting build.
# Target: pieces.mli.depends, tags: { package(ANSITerminal), package(ounit2), extension:mli, file:pieces.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules pieces.mli > pieces.mli.depends # cached
# Target: pieces.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:mli, file:pieces.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o pieces.cmi pieces.mli # cached
# Target: pieces.ml.depends, tags: { package(ANSITerminal), package(ounit2), extension:ml, file:pieces.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules pieces.ml > pieces.ml.depends # cached
# Target: pieces.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:cmo, extension:ml, file:pieces.cmo, file:pieces.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o pieces.cmo pieces.ml # cached
# Target: command.mli.depends, tags: { package(ANSITerminal), package(ounit2), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o command.cmi command.mli # cached
# Target: command.ml.depends, tags: { package(ANSITerminal), package(ounit2), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules command.ml > command.ml.depends # cached
# Target: command.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o command.cmo command.ml # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(ounit2), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules state.mli > state.mli.depends # cached
# Target: state.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o state.cmi state.mli # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(ounit2), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o state.cmo state.ml # cached
# Target: main.mli.depends, tags: { package(ANSITerminal), package(ounit2), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules main.mli > main.mli.depends # cached
# Target: main.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o main.cmi main.mli # cached
# Target: main.ml.depends, tags: { package(ANSITerminal), package(ounit2), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules main.ml > main.ml.depends
# Target: main.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o main.cmo main.ml
# Target: authors.mli.depends, tags: { package(ANSITerminal), package(ounit2), extension:mli, file:authors.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules authors.mli > authors.mli.depends # cached
# Target: authors.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:mli, file:authors.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o authors.cmi authors.mli # cached
# Target: authors.ml.depends, tags: { package(ANSITerminal), package(ounit2), extension:ml, file:authors.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules authors.ml > authors.ml.depends # cached
# Target: authors.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, extension:cmo, extension:ml, file:authors.cmo, file:authors.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -o authors.cmo authors.ml # cached
# Compilation successful.
